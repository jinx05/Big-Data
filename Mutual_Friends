/**
 * 
 */
/**
 * @author jitengirdhar
 *
 */

	import java.io.BufferedReader;
	import java.io.File;
	import java.io.FileReader;
	import java.io.IOException;
	import java.net.URI;
	import java.util.ArrayList;
	import java.util.Collections;
	import java.util.Comparator;
	import java.util.HashMap;

	import org.apache.hadoop.conf.Configuration;
	import org.apache.hadoop.fs.Path;
	import org.apache.hadoop.io.*;
	import org.apache.hadoop.mapreduce.Job;
	import org.apache.hadoop.mapreduce.Mapper;
	import org.apache.hadoop.mapreduce.Reducer;
	import org.apache.hadoop.mapreduce.Mapper.Context;
	import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
	import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
	import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
	import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
	import org.apache.hadoop.util.GenericOptionsParser;
	
	
	public class MutualFriend {
		public static class Map extends Mapper<LongWritable, Text, Text, Text>{
			private IntWritable[] frn = new IntWritable[2];
			private Text frlist = new Text(); // type of output key


			public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
				String[] line = value.toString().split("\t", -1);
				if (line.length < 2 || line[0].trim().isEmpty() || line[1].trim().isEmpty()) {
	            	return;
	            }
				//frn[0] = new IntWritable(Integer.parseInt(line[0].trim()));
				String[] frlister = line[1].trim().split(",");
				int currentUser = Integer.parseInt(line[0]);
				//String fkey = "";
				for( String friends : frlister)
				{
					if(friends.isEmpty())
						continue;
					else
					{
						/*frn[1] = new IntWritable(Integer.parseInt(friends.trim()));
						if(frn[1].get() > frn[0].get())
							{
								int temp = frn[0].get();
								frn[0] = frn[1];
								frn[1].set(temp);
							}*/
					}
					String res = line[1];
					Text result = new Text(res);
					//int k1 = frn[0].get(), k2 = frn[1].get();
					String res1;
					if (currentUser > Integer.parseInt(friends)) {
						res1 = friends+","+line[0];
					} else {
						res1 = line[0] + ","+friends;
					}
					Text keyer = new Text(res1); 
					context.write(keyer, result);	
				}
			
				}
			}



		public static class Reduce extends Reducer<Text,Text,Text,Text> {
			public void reduce(Text key, Iterable<Text> values,Context context) throws IOException, InterruptedException {
				//int sum = 0; // initialize the sum for each keyword
				String[] groupedList = new String[2];
	        	String[][] friendList = new String[2][];
	        	ArrayList<String> resultList = new ArrayList<>();
	        	
	        	int index = 0, i = 0, j = 0;
	        	for (Text val : values) {
	        		groupedList[index] = val.toString();
	        		friendList[index] = groupedList[index].split(",");
	        		index++;
	        	}
	        	
	        	while (index == 2 && i < friendList[0].length && j < friendList[1].length)
	        	{
	        		if (friendList[0][i].equals(friendList[1][j])) {
	        			resultList.add(friendList[0][i]);
	        			i++;
	        			j++;
	        		}
	        		else 
	        		{
	        			if(Integer.parseInt(friendList[0][i]) != Integer.parseInt(friendList[1][j]))
	        			{
	        				j++;
	        				
	        			}
	        			i++;
	        		}
	        	}
	        	
	        	String result = "";
	        	if (resultList.isEmpty()) {
	        		result = "No mutual friends";
	        	} else {
	        		result = String.join(",", resultList);
	        	}
	        	
	        	context.write(key, new Text(result));
		}

	}
		
		// Driver program
	  	public static void main(String[] args) throws Exception {
		  	Configuration conf = new Configuration();
		  	String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
		  
		  	// get all args
		  	if (otherArgs.length != 2) {
			  	System.err.println("Usage: WordCount <in> <out>");
			  	System.exit(2);
		  	}
		  	
		  	// create a job with name "wordcount"
		  	Job job = new Job(conf, "WordCount");
		  	job.setJarByClass(MutualFriend.class);
		  	job.setMapperClass(Map.class);
		  	job.setReducerClass(Reduce.class);
		  	
		  	job.setMapOutputKeyClass(Text.class);
		  	job.setMapOutputValueClass(Text.class);
		  	
		  	// uncomment the following line to add the Combiner job.setCombinerClass(Reduce.class);
		  	// set output key type
		  	job.setOutputKeyClass(Text.class);
		  	
		  	// set output value type
		  	job.setOutputValueClass(IntWritable.class);
		  	
		  	//set the HDFS path of the input data
		  	FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
		  	
		  	// set the HDFS path for the output
		  	FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));
		  	
		  	//Wait till job completion
		  	System.exit(job.waitForCompletion(true) ? 0 : 1);
		  	
	  	}
		
	}
